---
title: "R Show & Tell"
author: "Joscelin Rocha-Hidalgo"
date: "10/17/2024"
format: revealjs
editor: visual
---

## Annotater Package ![](images/clipboard-3869153607.png){width="103"}

![](https://raw.githubusercontent.com/luisdva/annotater/master/inst/media/repos2.gif)

## You can also do this:

![](https://raw.githubusercontent.com/luisdva/annotater/master/inst/media/repostitles.gif)

## packup package

Created by [Miles McBain](https://t.co/A8jjzH92RB) provides an Rstudio addin to move all these calls up to the top of the script, remove any duplicates, and sort them alphabetically.

------------------------------------------------------------------------

![](https://raw.githubusercontent.com/milesmcbain/packup/master/inst/media/packup_demo.gif)

------------------------------------------------------------------------

You can only install it through their github and not trough CRAN:

devtools::install_github("milesmcbain/packup")

------------------------------------------------------------------------

## styler pakage ![](https://styler.r-lib.org/reference/figures/logo.png){width="143"}

styler formats your code according to the [tidyverse style guide](https://style.tidyverse.org/) (or your custom style guide) so you can direct your attention to the content of your code. It helps to keep the coding style consistent across projects and facilitate collaboration.

------------------------------------------------------------------------

![](https://raw.githubusercontent.com/lorenzwalthert/some_raw_data/master/styler_0.1.gif)

## Code folding

When working in .r files rather than .RMD files, you can fold sections of your code.

![](images/clipboard-2838423688.png)

. . .

You can also fold an arbitrary selection of code by using Edit -\> Folding -\> Collapse (Alt-L).

Folded regions are preserved while editing a document; however all foldable regions are shown expanded by default when a file is closed and re-opened.

------------------------------------------------------------------------

## Code Sections

Code sections allow you to break a larger source file into a set of discrete regions for easy navigation between them. Code sections are automatically foldableâ€”for example, the following source file has three sections (one expanded and the other two folded):

![](images/clipboard-2407870686.png)

------------------------------------------------------------------------

To insert a new code section you can use the **Code** -\> **Insert Section** command. Alternatively, any comment line which includes at least four trailing dashes (-), equal signs (=), or pound signs (#) automatically creates a code section. For example, all of the following lines create code sections:

![](images/clipboard-1630521205.png)

------------------------------------------------------------------------

To navigate between code sections you can use the **Jump To** menu available at the bottom of the editor:

![](images/clipboard-811188745.png)

------------------------------------------------------------------------

## littleboxes package

RStudio Addin - creates boxed in titles in an Rscript

```         
# install.packages("devtools")
devtools::install_github("ThinkR-open/littleboxes")

# If you just want boxes without any tricks using Rstudio outline 
devtools::install_github("ThinkRstat/littleboxes",ref="simpleboxe")
```

------------------------------------------------------------------------

![](https://raw.githubusercontent.com/ThinkRstat/littleboxes/master/demo.gif)

------------------------------------------------------------------------

Luis D. Verde Arregoitia used most of this in one example to help his script be ready to share with others:

![](https://luisdva.github.io/assets/images/bscript.gif){fig-align="center"}

## A new dark theme package

This theme will produce plots with bold axes, bold axes labels and legend at the bottom leaving extra space for the plotting area. The color palette is also designed with the help of [color brewer](http://colorbrewer2.org/) using bold and contrasting colors so, one can easily distinguish any two colors .

```{r}
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(gridExtra))
source('ggplot_theme_Publication-2.R')
```

```{r}
Scatter <- ggplot(mtcars, aes(mpg,disp,color=factor(carb))) + 
    geom_point(size=3) + 
    labs(title="Scatter Plot")
#ggplotly(Scatter+ scale_colour_Publication() + theme_dark_blue())
grid.arrange((Scatter + scale_colour_Publication() + theme_dark_blue()),
             (Scatter + scale_colour_Publication() + theme_dark_grey()),nrow=1)

```

------------------------------------------------------------------------

```{r}
Bar <- ggplot(mtcars, aes(factor(carb),fill=factor(carb))) + 
    geom_bar(alpha=0.7) + 
    labs(title="Bar Plot")
#ggplotly(Bar + scale_colour_Publication() + theme_dark_blue())
grid.arrange((Bar + scale_fill_Publication() + theme_dark_blue()),
             (Bar + scale_fill_Publication() + theme_dark_grey()),nrow=1)
```

## Naming Files by Jenny Bryan

![](images/clipboard-3796003474.png)

------------------------------------------------------------------------

![](images/clipboard-1006622447.png)

------------------------------------------------------------------------

![](images/clipboard-75786887.png)

------------------------------------------------------------------------

![](images/clipboard-3000791273.png)

------------------------------------------------------------------------

![](images/clipboard-622389146.png)

------------------------------------------------------------------------

![](images/clipboard-1384257249.png)

------------------------------------------------------------------------

![](images/clipboard-3215941280.png)

------------------------------------------------------------------------

## ggreveal

It is an R package that makes it easy to present data on ggplot2 graphs incrementally. The functions in this package take a plot and break it down into a series of intermediary plots that can be shown in sequence (e.g. in different slides). Like this:

------------------------------------------------------------------------

![](https://www.weverthon.com/ggreveal/reference/figures/unnamed-chunk-2-1.gif)

------------------------------------------------------------------------

```         
library(palmerpenguins)
library(ggplot2)
library(ggreveal)

p <-  ggplot(penguins[!is.na(penguins$sex),],
             aes(body_mass_g, bill_length_mm,
                 group=sex, color=sex)) +
      geom_point() +
      geom_smooth(method="lm", formula = 'y ~ x', linewidth=1) +
      facet_wrap(~species) +
      theme_minimal()

plot_list <- reveal_groups(p)

reveal_save(plot_list, "myplot.png", width = 8, height = 4)
```

# Labels for variables

This is an example of how they could look like:

![](https://www.pipinghotdata.com/posts/2022-09-13-the-case-for-variable-labels-in-r/img/efc_view.PNG)

## Manual

You can manually assign variable labels with `set_variable_labels()` from the [{labelled}](https://larmarange.github.io/labelled/) package. The variable name is on the left hand side and the variable label is on the right hand side.

```         
penguins_labelled <- penguins |> 
  set_variable_labels(
    species           = "Penguin species",
    island            = "Island in Palmer Archipelago, Antarctica",
    bill_length_mm    = "Bill length (mm)",
    bill_depth_mm     = "Bill depth (mm)",
    flipper_length_mm = "Flipper length (mm)",
    body_mass_g       = "Body mass (g)",
    sex               = "Penguin sex",
    year              = "Study year"
  )
```

## Automatic

First you need a table with the variable names and the labels. In this case, Shannon created a df in R but you could import a csv or anything.

![](images/clipboard-4056451739.png)

------------------------------------------------------------------------

To quickly assign the variable labels, first create a named vector via [`deframe()`](https://tibble.tidyverse.org/reference/enframe.html) with values as the variable labels and names as the variable names.

![](images/clipboard-2811109953.png){width="400"}

------------------------------------------------------------------------

Now assign the labels using the [splice operator](https://rlang.r-lib.org/reference/splice-operator.html). Using the splice operator, labels are assigned via matching against the variable name, which means that variable order does not matter.

```         
penguins_labelled <- penguins |> 
  set_variable_labels(!!!penguins_labels)
```

## You can create data dictionaries

You can quickly create a data dictionary with labelled::generate_dictionary() to get an overview of your metadata. It is convenient to search this within the RStudio data viewer to find variables of interest.

```         
penguins_dictionary <- penguins_labelled |> 
  generate_dictionary()

penguins_dictionary |> 
  knitr::kable()
```

------------------------------------------------------------------------

![](images/clipboard-3952128871.png)

## Variable labels and ggplot

To substitute variable labels for variable names on your input variables, add ggeasy::easy_labs() to your ggplot.

```         
penguins_labelled |> 
  ggplot(aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +
  geom_point() +
  easy_labs()
```

![](https://www.pipinghotdata.com/posts/2022-09-13-the-case-for-variable-labels-in-r/variable-labels_files/figure-html5/unnamed-chunk-14-1.png){fig-align="center"}

## Export data with variable labels

For work, Shanon have an in-development public facing package [{croquet}](https://github.com/pcctc/croquet), which contains a single frequently used function: `add_labelled_sheet()`. This function exports data to excel with row one as variable names, and row two as the descriptive variable labels with filters automatically applied.

```         
# devtools::install_github("pcctc/croquet")
library(croquet)
library(openxlsx)

wb <- createWorkbook()
add_labelled_sheet(penguins_labelled)
saveWorkbook(wb, "penguins_labelled.xlsx")
```

------------------------------------------------------------------------

![](https://www.pipinghotdata.com/posts/2022-09-13-the-case-for-variable-labels-in-r/img/penguins_labelled_excel.PNG)

------------------------------------------------------------------------

## Exporting {gtsummary} tables to Excel

By Shannon Pileggi

. . .

```         
library(gtsummary)
library(huxtable)
library(openxlsx)

# format all date and date time variables in the excel output 
options("openxlsx.dateFormat" = "yyyy-mm-dd")
options("openxlsx.datetimeFormat" = "yyyy-mm-dd")
```

------------------------------------------------------------------------

## Single summary table

To render a single summary table to excel, use as_hux_xlsx().

```         
t1 <- mtcars |> 
  select(mpg:disp) |> 
  gtsummary::tbl_summary() |> 
  gtsummary::bold_labels()

gtsummary::as_hux_xlsx(t1, file = "path_including_file_name.xlsx")
```

------------------------------------------------------------------------

## Single summary table plus raw data

To create an excel file with a single sheet for a summary table and a sheet(s) for raw data listings, first use as_hux_xlsx(), load the workbook, and then add additional sheets.

. . .

```         
t1 <- mtcars |> 
  select(mpg:disp) |> 
  gtsummary::tbl_summary() |> 
  gtsummary::bold_labels()

gtsummary::as_hux_xlsx(t1, file = "path_including_file_name.xlsx")

wb <- openxlsx::loadWorkbook("path_including_file_name.xlsx")
openxlsx::addWorksheet(wb, sheetName = "mtcars_data")
openxlsx::writeData(wb, sheet = "mtcars_data", x = mtcars)

openxlsx::saveWorkbook(wb, "path_including_file_name.xlsx", overwrite = TRUE)
```

## Some cool people to follow

. . .

www.youtube.com/@EquitableEquations

![](images/clipboard-1573217562.png)

------------------------------------------------------------------------

https://www.youtube.com/@RProgramming101

![](images/clipboard-927155148.png)


--- 

## A new R group!

I found a new group and they are starting a book-club and e-meet ups. Feel free to join: www.rainbowR.org

![](https://rainbowr.org/images/rainbowR-hex.svg){fig-align="center"}
